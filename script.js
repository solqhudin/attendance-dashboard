const firebaseUrl = "https://meeting-attendance-project-default-rtdb.asia-southeast1.firebasedatabase.app/attendance.json";  
const sheetAPI = "https://script.google.com/macros/s/AKfycbyTPen0-Ihgr-gKofIrYsDRqAKdbmkR7iZ7KUMsL6fcKt17Cw_M0Fa1eJObHs9Gg1uSzA/exec";

const itemsPerPage = 5;
let currentPage = 1;
let allStudents = {};
let attendanceData = {};
let filteredLabels = [];
let filteredPercentages = [];
let filteredAttendanceCounts = [];
let selectedTopic = "all";
let totalParticipants = 0; // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

// üü¢ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏•‡∏∞ Google Sheet
Promise.all([
  fetch(sheetAPI).then(response => response.json()),
  fetch(firebaseUrl).then(response => response.json())
])
.then(([students, attendance]) => {
  allStudents = students;
  attendanceData = attendance;
  populateMeetingTopics(attendance);
  processData(selectedTopic, ""); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
})
.catch(error => console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error));

// üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
function populateMeetingTopics(attendance) {
  let topics = new Set();
  Object.values(attendance).forEach(record => {
    topics.add(`${record.topic} (${record.meetingDate})`);
  });

  const dropdown = document.getElementById("meetingSelector");
  dropdown.innerHTML = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô

  let defaultOption = new Option("üìã ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", "all");
  dropdown.appendChild(defaultOption);

  topics.forEach(topic => {
    let option = new Option(`üìå ${topic}`, topic);
    dropdown.appendChild(option);
  });

  dropdown.addEventListener("change", () => {
    selectedTopic = dropdown.value;
    currentPage = 1; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    processData(selectedTopic, document.getElementById("searchBox").value);
  });
}

// üü¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‚ùå ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°)
function processData(selectedTopic, searchValue) {
  let attendanceCount = {};
  let totalMeetings = new Set();
  let uniqueParticipants = new Set(); // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô

  let filteredAttendanceData = Object.values(attendanceData).filter(record => {
    let topicKey = `${record.topic} (${record.meetingDate})`;
    let studentInfo = `${record.studentId} ${allStudents[record.studentId] || ""}`.toLowerCase();
    let topicMatch = selectedTopic === "all" || topicKey === selectedTopic;
    let searchMatch = searchValue === "" || studentInfo.includes(searchValue.toLowerCase());
    
    if (topicMatch && searchMatch) {
      totalMeetings.add(topicKey);
      uniqueParticipants.add(record.studentId);
      attendanceCount[record.studentId] = (attendanceCount[record.studentId] || 0) + 1;
    }
    return topicMatch && searchMatch;
  });

  totalParticipants = uniqueParticipants.size; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  document.getElementById("totalParticipants").innerText = totalParticipants; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö

  let totalMeetingCount = selectedTopic === "all" ? totalMeetings.size : 1;
  document.getElementById("totalMeetings").innerText = totalMeetingCount;

  updateChart(attendanceCount, totalMeetingCount, searchValue);
}

// üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Chart ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
function updateChart(attendanceCount, totalMeetings, searchValue) {
  filteredLabels = [];
  filteredPercentages = [];
  filteredAttendanceCounts = [];

  Object.keys(attendanceCount).forEach(studentId => { // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
    let attended = attendanceCount[studentId] || 0;
    let percent = totalMeetings > 0 ? (attended / totalMeetings * 100).toFixed(2) : "0.00";
    
    let studentName = allStudents[studentId] || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    let studentLabel = `${studentId} (${studentName})`;

    if (searchValue === "" || studentLabel.toLowerCase().includes(searchValue.toLowerCase())) {
      filteredLabels.push(studentLabel);
      filteredPercentages.push(percent);
      filteredAttendanceCounts.push(attended);
    }
  });

  currentPage = Math.min(currentPage, Math.ceil(filteredLabels.length / itemsPerPage)); // ‡∏õ‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  updateChartDisplay();
}

// üü¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function updateChartDisplay() {
  let startIndex = (currentPage - 1) * itemsPerPage;
  let endIndex = startIndex + itemsPerPage;

  const ctx = document.getElementById('attendanceChart').getContext('2d');

  if (window.attendanceChart instanceof Chart) {
    window.attendanceChart.destroy();
  }

  window.attendanceChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: filteredLabels.slice(startIndex, endIndex),
      datasets: [
        {
          label: '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (%)',
          data: filteredPercentages.slice(startIndex, endIndex),
          backgroundColor: 'rgba(75, 192, 192, 0.6)'
        },
        {
          label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
          data: filteredAttendanceCounts.slice(startIndex, endIndex),
          backgroundColor: 'rgba(255, 99, 132, 0.6)'
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          max: 100
        }
      }
    }
  });

  updatePagination();
}

// üü¢ Pagination - ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏° 10 ‡∏Ñ‡∏ô
function updatePagination() {
  let totalPages = Math.ceil(filteredLabels.length / itemsPerPage);
  document.getElementById("currentPage").innerText = `‡∏´‡∏ô‡πâ‡∏≤ ${currentPage}`;

  document.getElementById("prevPage").disabled = currentPage === 1;

  let currentDataLength = filteredLabels.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).length;
  document.getElementById("nextPage").disabled = currentDataLength < itemsPerPage || currentPage >= totalPages;
}

// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
function changePage(step) {
  let totalPages = Math.ceil(filteredLabels.length / itemsPerPage);
  
  if ((step === 1 && currentPage < totalPages) || (step === -1 && currentPage > 1)) {
    currentPage += step;
    updateChartDisplay();
  }
}

// üü¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
document.getElementById("searchBox").addEventListener("input", () => {
  let searchValue = document.getElementById("searchBox").value;
  currentPage = 1;
  processData(selectedTopic, searchValue);
});

// üü¢ ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
function resetFilter() {
  document.getElementById("searchBox").value = "";
  currentPage = 1;
  processData(selectedTopic, "");
}
